{
    "variable": {
        "primary_key": "PassengerId",
        "target": "Survived",
        "features": {
            "categorical": [
                "Pclass",
                "Sex",
                "Embarked"
            ],
            "numerical": [
                "Age",
                "SibSp",
                "Parch",
                "Fare"
            ],
            "text": [
                "Name",
                "Ticket",
                "Cabin"
            ],
            "ignore": []
        }
    },
    "preprocessing": {
        "fillna": {
            "Age": "median",
            "Fare": "median",
            "Embarked": "mode"
        }
    },
    "feature_engineering": {
        "create_features": {
            "FamilySize": {
                "expression": "SibSp+Parch",
                "description": "Total family size including the passenger"
            }
        },
        "drop_features": [
            "Name",
            "SibSp",
            "Parch",
            "Ticket",
            "Cabin"
        ]
    },
    "model": {
        "name": "xgboost",
        "description": "XGBoost model for Titanic survival prediction",
        "version": "v1_0_0",
        "params": {
            "n_estimators": 200,
            "learning_rate": 0.01,
            "max_depth": 10,
            "use_label_encoder": false,
            "eval_metric": "logloss",
            "random_state": 42
        }
    },
    "training": {
        "method": "holdout",
        "holdout": {
            "train_size": 0.8,
            "test_size": 0.2,
            "random_state": 42
        },
        "k-fold": {
            "n_splits": 10,
            "shuffle": true,
            "random_state": 42
        },
        "encoding": {
            "onehot": {
                "features": [
                    "Pclass",
                    "Sex",
                    "Embarked"
                ],
                "params": {
                    "drop": "first",
                    "sparse_output": false,
                    "handle_unknown": "ignore"
                }
            }
        },
        "scaling": {
            "features": [],
            "method": ""
        }
    },
    "evaluation": {
        "metrics": [
            "accuracy",
            "precision",
            "recall",
            "f1",
            "roc_auc"
        ],
        "average": "binary",
        "threshold": 0.5
    },
    "input": {
        "train_path": "data/raw/train.csv",
        "test_path": "data/raw/test.csv"
    },
    "output": {
        "model_path": "results/v1_0_0/models/model.pkl",
        "submission_file": "results/v1_0_0/submission/submission.csv"
    }
}